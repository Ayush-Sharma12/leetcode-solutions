class Solution {
    public double soupServings(int n) {
               
               if(n >= 5000) {
                  return 1;
               }
              int[][] opt = {{100, 0}, {75, 25}, {50, 50}, {25, 75}};
              double[][] dp = new double[n+1][n+1];
              for(double[] d : dp) {
                  Arrays.fill(d, -1);
              }
              return totalProbablity(n, n, opt, dp);
    }


    private double totalProbablity(int A, int B, int[][] opt, double[][] dp) {
             
             if(A <= 0 && B <= 0) {
                   return 0.5;
             }

             if(A <= 0) {
                  return 1.0;
             }

             if(B <= 0) {
                  return 0.0;
             }

             if(dp[A][B] != -1) {
                   return dp[A][B];
             }
                double prob = 0.0;
             for(int[] op : opt) {
                   int A_ = A - op[0];
                   int B_ = B - op[1];

                   prob = prob + totalProbablity(A_, B_, opt, dp);
             } 


             return dp[A][B] = (prob * 0.25) ;

    }
}